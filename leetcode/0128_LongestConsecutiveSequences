class Solution {
    /*
    https://www.cnblogs.com/springfor/p/3869981.html
    这道题利用HashSet的唯一性解决，能使时间复杂度达到O(n)。首先先把所有num值放入HashSet，然后遍历整个数组，如果HashSet中存在该值，就先向下找到边界，找的同时把找到的值一个一个从set中删去，然后再向上找边界，同样要把找到的值都从set中删掉。所以每个元素最多会被遍历两边，时间复杂度为O(n)。
    */
    public int longestConsecutive(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        HashSet<Integer> hs = new HashSet<Integer>();
        
        for (int i = 0; i < nums.length; i++) {//nums里的所有值放入HashSet中
            hs.add(nums[i]);
        }
        
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (hs.contains(nums[i])) {
                int count = 1;
                hs.remove(nums[i]);
                
                int low = nums[i] - 1;
                while (hs.contains(low)) {
                    hs.remove(low);
                    low--;
                    count++;
                }
                
                int high = nums[i] + 1;
                while (hs.contains(high)) {
                    hs.remove(high);
                    high++;
                    count++;
                }
                
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
