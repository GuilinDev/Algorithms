class Solution {
    /*
    https://www.programcreek.com/2014/05/leetcode-largest-rectangle-in-histogram-java/
    The key to solve this problem is to maintain a stack to store bars' indexes. The stack only keeps the increasing bars.
    */
    public int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length == 0) {
            return 0;
        }
        Stack<Integer> stack = new Stack<>();
        
        int max = 0;
        int i = 0;
        
        while (i < heights.length) {
            //如果当前的height比之前的大或者等于，则把当前的index压入stack
            if (stack.isEmpty() || heights[i] >= heights[stack.peek()]) {
                stack.push(i);
                i++;
            } else {
                //如果当前比之前的小，计算最大的值
                int p = stack.pop();
                int h = heights[p];
                int w = stack.isEmpty() ? i : i - stack.peek() - 1;
                max = Math.max(h * w, max);
            }
        }
        while (!stack.isEmpty()) {
            int p = stack.pop();
            int h = heights[p];
            int w = stack.isEmpty() ? i : i - stack.peek() - 1;
            max = Math.max(h*w, max);
        }
        return max;
    }
}
