class Solution {
    /*
    https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109075/Java-solution-Binary-Search
    */
    
    public int smallestDistancePair(int[] nums, int k) {
        int n = nums.length;
        Arrays.sort(nums);
        
        //Minimum absolute difference
        int low = nums[1] - nums[0];
        for (int i = 1; i < n - 1; i++) {
            low = Math.min(low, nums[i+1] - nums[i]);
        }
        
        //Maximum absolute difference
        int high = nums[n-1] - nums[0];
        
        //Do binary search for k-th absolute difference
        while (low < high) {
            int mid = low + (high - low)/2;
            if (countPairs(nums, mid) < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
    //Returns number of pairs with absolute difference less than or equal to mid
    private int countPairs(int[] nums, int mid) {
        int n = nums.length, res = 0;
        for (int i = 0; i < n; i++) {
            res += upperBound(nums, i, n-1, nums[i] + mid) - i -1;
        }
        return res;
    }
    
    private int upperBound(int [] nums, int low, int high, int key) {
        if (nums[high] <= key) {
            return high + 1;
        }
        while (low < high) {
            int mid = low + (high - low)/2;
            if (key >= nums[mid]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}
