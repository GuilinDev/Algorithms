/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    http://blog.csdn.net/linhuanmars/article/details/24354291
    这是一道比较简单的链表操作的题目，要求是删去有序链表中重复的元素。方法比较清晰，维护两个指针，一个指向当前不重复的最后一个元素，一个进行依次扫描，遇到不重复的则更新第一个指针，继续扫描，否则就把前面指针指向当前元素的下一个（即把当前元素从链表中删除）。时间上只需要一次扫描，所以是O(n)，空间上两个额外指针，是O(1)。
    */
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode pre = head;
        ListNode cur = head.next;
        
        while (cur != null) {
            if (pre.val == cur.val) {//重复，把前面指针指向当前元素的下一个（也就是把当前元素删掉了）
                pre.next = cur.next;
            } else {//不重复，更新第一个指针pre为cur
                pre = cur;
            }
            cur = cur.next;
        }
        return head;
    }
}
