// Iteratily
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        //p3暂时记住当前节点（p2）的下一位，以p2为中心进行翻转
        ListNode p1 = head;
        ListNode p2 = head.next;
        ListNode p3 = null;
        while (p2 != null) {
            p3 = p2.next;
            p2.next = p1;
            //p1和p2依次往后挪
            p1 = p2;
            p2 = p3;
        }
        //将本来在最左边的head指向最右边
        head.next = null;
        head = p1;
        
        return head;
    }
}

//Recursively
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode nextNode = head.next;
        ListNode newHead = reverseList(nextNode);
        nextNode.next = head; // put the original head
        head.next = null; // remove the original head
        return newHead;
    }
}
