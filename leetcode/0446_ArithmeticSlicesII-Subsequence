class Solution {
    /*
    方法二：http://blog.csdn.net/jmspan/article/details/53451241
    详细解释：https://leetcode.com/problems/arithmetic-slices-ii-subsequence/discuss/92822/Detailed-explanation-for-Java-O(n2)-solution
    Both time and space complexities are O(n^2). Some minor points for improving the time and space performance are:

1) Define the type of the difference as Integer type instead of Long. This is because there is no valid arithmetic subsequence slice that can have difference out of the Integer value range. But we do need a long integer to filter out those invalid cases.
2)Preallocate the HashMap to avoid reallocation to deal with extreme cases.
3)Refrain from using lambda expressions inside loops.
    */
    public int numberOfArithmeticSlices(int[] A) {
        int result = 0;
        Map<Integer, Integer>[] map = new Map[A.length];
        
        for (int i = 0; i < A.length; i++) {
            map[i] = new HashMap<>();
            
            for (int j = 0; j < i; j++) {
                long diff = (long)A[i] - A[j];
                if (diff <= Integer.MIN_VALUE || diff > Integer.MAX_VALUE) {
                    continue;
                }
                
                int c1 = map[i].getOrDefault((int)diff, 0);
                int c2 = map[j].getOrDefault((int)diff, 0);
                
                map[i].put((int)diff, c1+c2+1);
                result += c2;
            }
        }
        return result;
    }
}
