class Solution {
    /*
    背包问题的通用解法https://leetcode.com/problems/subsets/discuss/27281
    */
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<Integer>(), nums, 0);
        return list;
    }
    private void backtrack (List<List<Integer>> list, List<Integer> tempList, int[] nums, int start) {
        list.add(new ArrayList<Integer>(tempList));
        for (int i = start; i < nums.length; i++) {
            tempList.add(nums[i]); //先从start的位置开始计算
            backtrack(list, tempList, nums, i+1);
            tempList.remove(tempList.size() - 1); //移除上一个start值，下一轮换上新的start
        }
    }
}
