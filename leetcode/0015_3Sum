class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>(); //保持最终结果
        HashSet<ArrayList<Integer>> noDuplicateTriplets = new HashSet<ArrayList<Integer>>();//保持中间找到的triplet不要是重复的
        
        if (nums == null || nums.length < 3) {
            return result;
        }
        
        Arrays.sort(nums);
        
        for (int first = 0; first <= nums.length - 3; first++) {
            int second = first + 1, third = nums.length - 1;
            
            //接下来需要确定第二个指针second和第三个指针third是否找到合适的triplet或者相遇
            while (second < third) {
                int sum = nums[first] + nums[second] + nums[third];
                if (sum < 0) {
                    second++;
                } else if (sum > 0) {
                    third--;
                } else { //找到了一个triplet
                    ArrayList<Integer> oneTriplet = new ArrayList<Integer>();
                    oneTriplet.add(nums[first]);
                    oneTriplet.add(nums[second]);
                    oneTriplet.add(nums[third]);
                    
                    if (!noDuplicateTriplets.contains(oneTriplet)) {//因为是排好序的，所以找出来的triplet直接跟之前的所有triplets比较一下看看是否重复
                        noDuplicateTriplets.add(oneTriplet);//没有重复就加到hashset里面为了接下来比较下一个可能的triplet比较
                        result.add(oneTriplet);//没有重复同时也加到结果里面
                    }
                    
                    //注意这里second和third是同时移动，因为排过序了，所以只移动一个index的话是不会再找到非重复的triplet的
                    second++;
                    third--;
                }
            }
        }
        return result;
    }
}
