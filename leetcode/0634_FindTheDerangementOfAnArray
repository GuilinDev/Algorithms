class Solution {
    /*
    数组的错排
    https://en.wikipedia.org/wiki/Derangement#Counting_derangements
    */
    private static final int M = 1000000007;
    public int findDerangement(int n) {
        //Recursive
        long answer = 1;
        for (int i = 1; i <= n; i++) {
            answer = (i * answer % M + (i % 2 == 0 ? 1 : -1)) % M;
        }
        return (int)answer;
    }
    /*
    DP, dp[n]表示到n能形成的Derangement，dp[n+1]无非是多出来一个数n+1，

（1）n+1可以与0..n之间的任意1个数交换（可以确保没有重复，因为不同的Derangement至少有2位差别，与n+1交换

一位最后还是不同的）；

（2）前n位数也不一定严格要求是Derangement，可以存在一位异常，及value等于index，此时等价于dp[n-1]

所以dp[n+1]=n*(dp[n]+dp[n-1])

    public int findDerangement(int n) {
        if(n <= 1) return 0;
        long[] dp = new long[n + 1];
        long mod = 1000000007;
        dp[2] = 1;
        for(int i = 3; i < dp.length; i++){
            dp[i] = (long)(i - 1) * (dp[i - 1] + dp[i - 2]) % mod;
        }
        return (int)dp[dp.length - 1];
    }
    */
}
