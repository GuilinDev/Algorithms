class Solution {
    /*
    将二维矩阵换作一维，再利用二分查找的办法
    二维矩阵和一维数组的转换：
    n * m matrix convert to an array => matrix[x][y] => a[x * m + y]
    an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];
    */
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) {
            return false;
        }
        int start = 0, rows = matrix.length, cols = matrix[0].length;
        int end = rows*cols - 1;
        
        while (start <= end) {
            int mid = start + (end - start)/2;
            if (matrix[mid/cols][mid%cols] == target) {//除以列数等到所在的行数，取余列数得到所在的列数 - 即为中间的那个数
                return true;
            } else if (matrix[mid/cols][mid%cols] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return false;
    }
}
