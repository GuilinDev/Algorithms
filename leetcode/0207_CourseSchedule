class Solution {
    /*
    这道题对于学生来说应该不陌生，因为我们在选课的时候经常会遇到想选某一门课程，发现选它之前必须先上了哪些课程，这道题给了很多提示，第一条就告诉我们了这道题的本质就是在有向图中检测环。 LeetCode中关于图的题很少，有向图的仅此一道，还有一道关于无向图的题是 Clone Graph 无向图的复制。图这种数据结构相比于树啊，链表啊什么的要更为复杂一些，尤其是有向图，很麻烦。
    第二条提示是在讲如何来表示一个有向图，可以用边来表示，边是由两个端点组成的，用两个点来表示边。
    第三第四条提示揭示了此题有两种解法，DFS和BFS都可以解此题。
    这里用BFS的解法，我们定义二维数组graph来表示这个有向图，一位数组indegree是每个顶点的入度。开始先根据输入来建立这个有向图，并将入度数组也初始化好。然后定义一个queue变量，将所有入度为0的点放入队列中，然后开始遍历这个队列，从graph里遍历其连接的点，每到达一个新节点，将其入度减一，如果此时该点入度为0，则放入队列末尾。直到遍历完队列中所有的值，若此时还有节点的入度不为0，则说明环存在，返回false，反之则返回true。
    */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //此问题等价于图(or forest)中有无环的存在,使用topological sorting, 成功sort后,如果prerequisite没有空,则没有环.
        int[] map = new int[numCourses];
        
        for (int i = 0; i < prerequisites.length; i++) {
            map[ prerequisites[i][1] ]++;
        }
        
        Queue<Integer>queue = new LinkedList<Integer>();
        
        for (int i = 0; i < map.length; i++) {
            if (map[i] == 0) {
                queue.add(i);//所有indegree为0的点放入数组中
            }
        }
        
        int count = queue.size();
        while (!queue.isEmpty()) {
            int k = queue.remove();
            for (int i = 0; i < prerequisites.length; i++) {
                if (k == prerequisites[i][0]) {
                    int l = prerequisites[i][1];
                    map[l]--;//每到达一个新节点，将其入度减一
                    if (map[l] == 0) {//如果此时该点入度为0，则放入队列末尾
                        queue.add(l);
                        count++;
                    }
                }
            }
        }
        return count == numCourses;//若此时还有节点的入度不为0，则说明环存在，返回false，反之则返回true
    }
}
