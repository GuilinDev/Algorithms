/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        /*
        方法一：如果两个链长度相同的话，那么对应的一个个比下去就能找到，所以只需要把长链表变短即可。
            具体算法为：分别遍历两个链表，得到分别对应的长度。然后求长度的差值，把较长的那个链表向后移动这个差值的个数
            （跳过较长的List前面的nodes，从长度相等的地方开始一个一个的比较，直到找到Intersection或者到末尾都没有Intersection。），然后一一比较。
        */
        if (headA == null || headB == null) {
            return null;
        }
        
        int lenA = getLength(headA), lenB = getLength(headB);
        
        if (lenA > lenB) {
            for (int i = 0; i < lenA - lenB; ++i) {
                headA = headA.next;
            } 
        } else {
            for (int i = 0; i < lenB- lenA; ++i) {
                headB = headB.next;
            }
        }
        
        while (headA != null && headB != null && headA != headB){
            headA = headA.next;
            headB = headB.next;
        }
        
        return (headA != null && headB != null) ? headA : null;       
    }
     public int getLength(ListNode head){
            int count = 0;
            while (head != null) {
                count++;
                head = head.next;
            }
            return count;
    }
    
     /*
        方法二：还有一种特别巧妙的方法，虽然题目中强调了链表中不存在环，但是我们可以用环的思想来做，我们让两条链表分别从各自的开头开始往后遍历，当其中一条           遍历到末尾时，我们跳到另一个条链表的开头继续遍历。两个指针最终会相等，而且只有两种情况，一种情况是在交点处相遇（有交叉），另一种情况是在各自的末            尾的空节点（没有交叉）处相等。为什么一定会相等呢，因为两个指针走过的路程相同，是两个链表的长度之和，所以一定会相等。
        */
    
    //第二遍写
}
