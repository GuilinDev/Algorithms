class Solution {
    /*
    给定一个整数，返回n的阶乘（n！）数字中的后缀0的个数 - 解法应该满足多项式的时间复杂度
    朴素解法：先求出n！的值，然后再计算后面0的个数（重复除以10，判断余数是否为0，直到不为0），会溢出；
    O(logn)的解法：考虑n!的质数因子，0的得到总是2和5相乘来的，因此需要计算2和5的个数，就解决了，
    例如：n=5，(5*4*3*2*1) - (5*2*2*3*2*1)，包含一个5和3个2，因此后缀0的个数是1；
    例如：n=11 (...)包含2个5和3个2，很容易想到质数因子中2的个数总是多于5的个数，因此只要计算5的个数就行了;
    还有一点要注意的就是25这种，5和5相乘的结果，所以，还要看n/5里面有多少个5，也就相当于看n里面有多少个25，还有125，625.。。
    */
    public int trailingZeroes(int n) {
        int ans = 0;
        while (n > 0) {
            ans += n/5;
            n /= 5;
        }
        return ans;
    }
}
