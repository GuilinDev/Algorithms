// top down的解法
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        for (int i = 1; i <= amount; i++) {
            dp[i] = -100;
        }
        return coinChange(coins, amount, dp);
    }
    public int coinChange(int[] coins, int amount, int[] dp) {
        if (amount == 0) {
            return 0;
        }
        //如果之前已经计算过
        if (dp[amount] != -100) {
            return dp[amount];
        }
        
        //没计算过
        for (int coin : coins) {
            if (coin > amount) {
                continue;
            }
            int option = coinChange(coins, amount - coin, dp);//不选当前的coin
            if (option == -1) {
                continue;
            }
            if (dp[amount] == -100 || option + 1 < dp[amount]) {
                dp[amount] = option + 1;
            }
        }
        if (dp[amount] == -100) {
            dp[amount] = -1;
        }
        return dp[amount];
    }
}
