class Solution {
    /*
    背后数学的详细解释https://leetcode.com/problems/integer-break/discuss/80721/Why-factor-2-or-3-The-math-behind-this-problem.
    */
    public int integerBreak(int n) {
        if (n <= 1) {
            return 0;
        }
        int[] dp = new int[n+1];
        dp[1] = 1;
        for (int index = 2; index <= n; index++) {
            integerBreakInner(dp, index);
        }
        return dp[n];
    }
    private int integerBreakInner(int[] dp, int n) {
        int ans = 0;
        for (int index = 1; index <= n/2; index++) {
            ans = Math.max(ans, Math.max(index, dp[index]) * Math.max((n-index), dp[n-index]));
        }
        return dp[n] = ans;
    }
}
