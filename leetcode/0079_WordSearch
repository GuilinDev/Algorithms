class Solution {
    /*
    这道题很容易感觉出来是图的题目，其实本质上还是做深度优先搜索。基本思路就是从某一个元素出发，往上下左右深度搜索是否有相等于word的字符串。这里注意每次从一个元素出发时要重置访问标记（也就是说虽然单次搜索字符不能重复使用，但是每次从一个新的元素出发，字符还是重新可以用的）。深度优先搜索的算法就不再重复解释了。一次搜索的复杂度是O(E+V)，E是边的数量，V是顶点数量，在这个问题中他们都是O(m*n)量级的（因为一个顶点有固定上下左右四条边）。加上我们对每个顶点都要做一次搜索，所以总的时间复杂度最坏是O(m^2*n^2)，空间上可以用一个数组来记录访问情况(used)，复杂度是O(m*n)，也可以进入下一阶搜索钱保存当前char的值，之后再恢复过来，复杂度为O(m)。
    参考了http://blog.csdn.net/linhuanmars/article/details/24336987
    注意这道题与200-Number of Islands类似解法
    */
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return true;
        }
        if (board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }
        //boolean[][]used = new boolean[board.length][board[0].length];
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (dfsSearch(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean dfsSearch(char[][] board, String word, int index, int i, int j) {
        if (index == word.length()) {
            return true;
        }
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) { //超过了范围或者没有相等的
            return false;
        }
        char temp = board[i][j]; // 进入下一阶搜索之前保存当前位置的值
        board[i][j] = '0';
        if (dfsSearch(board, word, index+1, i-1, j)
           || dfsSearch(board, word, index+1, i+1, j)
           || dfsSearch(board, word, index+1, i, j-1)
           || dfsSearch(board, word, index+1, i, j+1)) {
            board[i][j] = temp;
            return true;
        }
        
        board[i][j] = temp; // 在搜索返回之后恢复这个值
        return false;
    }
}
