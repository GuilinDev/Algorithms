class Solution {
    /*
    https://leetcode.com/problems/4-keys-keyboard/discuss/105980/Java-4-lines-recursion-with-step-by-step-explanation-to-derive-DP
    使用 i 步来获得 maxA(i) ，然后用剩下的 n - i 步来获得 n - i - 1 个 maxA(i)的复制。

    比如：
    A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
    这里 n = 7 ，我们使用 i = 3 步来获得 AAA
    接着我们使用剩下的 n - i = 4 步: Ctrl A, Ctrl C, Ctrl V, Ctrl V, 来获得 n - i - 1 = 3 个 AAA的复制。

    如果我们不使用copy，那么答案就是 n, 或者我们使用copy，那么需要有3步来预留给 Ctrl A, Ctrl C, Ctrl V ，所以 i 最多为 n - 3。
    */
    public int maxA(int N) {
        int[] dp = new int[N+1];
        for (int i = 0; i <= N; i++) {
            dp[i] = i;
            for (int j = 1; j <= i - 3; j++) {
                dp[i] = Math.max(dp[i], dp[j] * (i - j - 1));
            }
        }
        return dp[N];
    }
}
