class Solution {
    /*
    可以用三个变量记录第一大，第二大，第三大的数，在从左到右遍历数据过程中更新这三个值。时间复杂度O（n）；
    关于这个题目的分析，主要说一下关于status变量，其它部分代码写的还比较清楚。其实这个题目的一个小的陷阱是有个这个测试用例：
    -2147483648，这个数是最小的整数，写这个程序的最直接想法是设置三个变量存储最大，第二大，第三大的数字。但是初值很容易写成是Integer.MIN_VALUE。所以在判断是否有第三个数的时候就不知道第三个数是数据本身有的还是设置的初值。当然，再设置三个布尔变量也是可行的，但是相对繁琐。所以在这里用位操作，每次有数据替换掉初值的时候，一定可以进行一个右移位操作。因为现在上述程序结构，如果有新的值记录到三个变量中，一定是能顶掉最左边的数字。所以使用移位操作更加高效，代码也相对简洁。
    */
    public int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = null;
        
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3)) {
                continue;
            }
            
            if (max1 == null || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == null || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == null || n > max3){
                max3 = n;
            }
        }
        return max3 == null ? max1 : max3;
    }
}
