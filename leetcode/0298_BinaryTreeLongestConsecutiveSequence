/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/discuss/74468/Easy-Java-DFS-is-there-better-time-complexity-solution
    DFS
    */
    
    private int max = 0;
    public int longestConsecutive(TreeNode root) {
       if (root == null) {
           return 0;
       }
        helper(root, 0, root.val);
        return max;
    }
    
    private void helper(TreeNode root, int cur, int target) {
        if (root == null) {
            return;
        }
        if (root.val == target) {
            cur++;
        } else {
            cur = 1;
        }
        max = Math.max(cur, max);
        helper(root.left, cur, root.val + 1);
        helper(root.right, cur, root.val + 1);
        
    }
}
