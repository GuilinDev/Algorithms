/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    层序遍历二叉树是典型的广度优先搜索BFS的应用，图遍历中也经常用到，但是这里稍微复杂一点的是，我们要把各个层的数分开，存到一个二维向量里面，大体思路还是基本相同的,实现的方式是，同样是维护一个队列，只是对于每个结点我们知道它的邻接点只有可能是左孩子和右孩子。算法的复杂度是就结点的数量，O(n)，空间复杂度是一层的结点数，也是O(n)。
    http://blog.csdn.net/linhuanmars/article/details/23404111
    */
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) {
            return res;
        }
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        
        int curNum = 0;
        int lastNum = 1;
        ArrayList<Integer> list = new ArrayList<Integer>();
        while (!queue.isEmpty()) {
            TreeNode cur = queue.poll();//获取但移除此表的头，peek()则是获取并移除此表的头
            lastNum--;
            list.add(cur.val);
            if (cur.left != null) {
                queue.add(cur.left);
                curNum++;
            }
            if (cur.right != null) {
                queue.add(cur.right);
                curNum++;
            }
            if (lastNum == 0) {
                lastNum = curNum;
                curNum = 0;
                res.add(list);
                list = new ArrayList<Integer>();
            }
        }
        return res;
    }
}
