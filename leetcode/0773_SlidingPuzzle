class Solution {
    /*
    https://leetcode.com/problems/sliding-puzzle/discuss/113620/Java-19ms-26-clean-lines-BFS-with-comment.
    */
    public int slidingPuzzle(int[][] board) {
        Set<String> seen = new HashSet<>(); // Set用来防止重复
        String target = "123450";
        
        //将棋盘转换成String - 初始状态
        String s = Arrays.deepToString(board).replaceAll("\\[|\\]|,|\\s", "");
        Queue<String> q = new LinkedList<>(Arrays.asList(s));
        seen.add(s);// add initial state to set
        int ans = 0; // record the # of rounds of Breadth Search
        while (!q.isEmpty()) {//还没有遍历整个states
            //loop used to control search breadth
            for (int sz = q.size(); sz > 0; sz--) {
                String str = q.poll();
                if (str.equals(target)) {
                    return ans; //found target
                }
                int i = str.indexOf('0'); //locate '0'
                int [] d = {1, -1, 3, -3}; //potential swap index
                
                for (int k = 0; k < 4; k++) { //遍历所有的选项
                    int j = i + d[k]; // potential swap index
                    if ( j < 0 || j > 5 || i == 2 && j == 3 || i == 3  && j == 2) {
                        continue;
                    }
                    char[] ch = str.toCharArray();
                    
                    //swap ch[i] and ch[j]
                    char temp = ch[i];
                    ch[i] = ch[j];
                    ch[j] = temp;
                    
                    s = String.valueOf(ch); //a new candidate state
                    if (seen.add(s)) {
                        q.offer(s);//避免重复
                    }
                }
            }
            ans++; //完成了一轮的BST，+1
        }
        return -1;
    }
}
