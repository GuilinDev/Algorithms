class Solution {
    /*
    因为k是不定的, 所以无法用LOOP. 递归是此类题的常用解法. 为了方便, 多用一个variable: sum保存当前cur中所有数的和. 注意要新建一个list 放入结果中, 否则放入的reference 会指向原来的不断变化的list,    res.add(new ArrayList(cur));
    */
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (k < 1 || n < 1) {
            return res;
        }
        List<Integer> cur = new ArrayList<Integer>();
        rec(res, cur, 0, k, n, 1);
        return res;
    }
    
    private void rec(List<List<Integer>> res, List<Integer> cur, int sum, int k, int n, int level) {
        if (sum == n && k == 0) {
            res.add(new ArrayList(cur));
            return;
        } else if (sum > n || k <= 0) {
            return;
        }
        for (int i = level; i <= 9; i++) {
            cur.add(i);
            rec(res, cur, sum+i, k-1, n, i+1);
            cur.remove(cur.size() - 1);
        }
    }
}
