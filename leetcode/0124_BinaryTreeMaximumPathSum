/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /**
 * 我的gitbook分析：https://guilindev.gitbook.io/interview/~/drafts/-LVq8UaGUYPqFOPszOvo/primary/leetcode/ji-chu-shu-ju-jie-gou-zai-suan-fa-zhong-de-ying-yong/untitled-1#124-binary-tree-maximum-path-sum
 */
class Solution {
    int result;
    public int maxPathSum(TreeNode root) {
        if (root == null) {
            return 0;
        }
        result = Integer.MIN_VALUE;
        dfs(root);//dfs中无需记录每一次递归的返回值，只需要每次选出最大值
        return result;
    }
    private int dfs (TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = dfs(root.left);
        int right = dfs(root.right);

        //路径的和（不是某个结点的值）跟0相比较，不需要和为负数的路径，因此如果是负数就设为0
        if (left < 0) {
            left = 0;
        }
        if (right < 0) {
            right = 0;
        }
        result = Math.max(result, left + right + root.val);//当前回溯到的结点的子树的和vs之前的子树的和

        return root.val += Math.max(left, right);//左右子树中挑一个比较大的路径（前面已经把left和right的负值路径去掉了）
    }
}
