public class Solution {
    /*
    http://blog.csdn.net/ljiabin/article/details/45846527
    相比79-Word Search，题目变成给定一组word，检查哪个word可以由board形成。

如果还按照DFS回溯的方法，逐个检查每个word是否在board里，显然效率是比较低的。所以可以利用Trie数据结构，也就是前缀树。然后dfs时，如果当前形成的单词不在Trie里，就没必要继续dfs下去了。如果当前字符串在trie里，就说明board可以形成这个word。
    */
    
    Set<String> res = new HashSet<>();
    public List<String> findWords(char[][] board, String[] words) {
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m ; i++) {
            for (int j = 0; j < n; j++) {
                dfs(board, visited, "", i, j, trie);
            }
        }
        return new ArrayList<String>(res);
    }
    public void dfs(char[][] board, boolean[][] visited, String str, int x, int y, Trie trie) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) {
            return;
        }
        if (visited[x][y]) {
            return;
        }
        str += board[x][y];
        if (!trie.startsWith(str)) {
            return;
        }
        if (trie.search(str)) {
            res.add(str);
        }
        
        visited[x][y] = true;
        dfs(board, visited, str, x-1, y, trie);
        dfs(board, visited, str, x+1, y, trie);
        dfs(board, visited, str, x, y-1, trie);
        dfs(board, visited, str, x, y+1, trie);
        
        visited[x][y] = false;
    }
}

//实现前缀树的类 - 类似实现208题
class TrieNode {  
    public TrieNode[] children = new TrieNode[26];  
    public String item = "";  
      
    // Initialize your data structure here.  
    public TrieNode() {}  
}  
  
class Trie {  
    private TrieNode root;  
  
    public Trie() {  
        root = new TrieNode();  
    }  
  
    // Inserts a word into the trie.  
    public void insert(String word) {  
        TrieNode node = root;  
        for (char c : word.toCharArray()) {  
            if (node.children[c - 'a'] == null) {  
                node.children[c - 'a'] = new TrieNode();  
            }  
            node = node.children[c - 'a'];  
        }  
        node.item = word;  
    }  
  
    // Returns if the word is in the trie.  
    public boolean search(String word) {  
        TrieNode node = root;  
        for (char c : word.toCharArray()) {  
            if (node.children[c - 'a'] == null) return false;  
            node = node.children[c - 'a'];  
        }  
        return node.item.equals(word);  
    }  
  
    // Returns if there is any word in the trie  
    // that starts with the given prefix.  
    public boolean startsWith(String prefix) {  
        TrieNode node = root;  
        for (char c : prefix.toCharArray()) {  
            if (node.children[c - 'a'] == null) return false;  
            node = node.children[c - 'a'];  
        }  
        return true;  
    }  
}  
