class Solution {
    /*
    本题是一道比较巧妙的DP问题，用HashMap保存状态。一个玩家当前能否获胜取决于两点：1、当前剩余还能获取的元素；2、当前剩余的desired（剩余目标和）

由于max范围在20以内，因此当前剩余元素的表示按位来做，map存的值就是在当前剩余元素的状态下获胜还是失败。

要注意，一个玩家取了一个值之后再调用helper，如果得到false，说明下一个玩家必败态，故而当前玩家必胜态。
    */
    HashMap<Integer, Boolean> map = new HashMap<>();
    boolean[] dp;
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        int sum = (1 + maxChoosableInteger) * maxChoosableInteger / 2;
        if (sum < desiredTotal) {
            return false;
        }
        if (desiredTotal <= 0) {
            return true;
        }
        
        dp = new boolean[maxChoosableInteger];
        return helper(desiredTotal);
    }
    
    private boolean helper(int desiredTotal) {
        if (desiredTotal <= 0) {
            return false;
        }
        int key = format();
        if (map.containsKey(key)) {
            return map.get(key);
        }
        for (int i = 0; i < dp.length; i++) {
            if (!dp[i]) {
                dp[i] = true;
                if (!helper(desiredTotal - i - 1)) {
                    map.put(key, true);
                    dp[i] = false;
                    return true;
                }
                dp[i] = false;
            }
        }
        map.put(key, false);
        return map.get(key);
    }
    private int format() {
        int res = 0;
        for (int i = 0; i <= dp.length - 1; i++) {
            if (dp[i]) {
                res |= (1 << i);
            }
        }
        return res;
    }
}
