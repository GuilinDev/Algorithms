class Solution {
    //跟70题 Subsets比较，是不允许有duplicates的，背包递归的解法https://leetcode.com/problems/subsets/discuss/27281/
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }
    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] nums, int start) {
        list.add(new ArrayList<>(tempList));
        for (int i = start; i < nums.length; i++) {
            if (i > start && nums[i] == nums[i-1]) {//跳过duplicates，这里是与78题不同的地方
                continue; 
            }
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
    //第二遍写非递归：http://blog.csdn.net/worldwindjp/article/details/23300545
}
