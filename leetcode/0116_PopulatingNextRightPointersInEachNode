/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     这道题将一棵完美二叉树的每一层维护成一个链表，树本身是给定的。其实思路上很接近层序遍历第102题Binary Tree Level Order Traversal，只是这里不需要额外维护一个队列。因为这里每一层我们会维护成一个链表，这个链表其实就是每层起始的那个队列，因此我们只需要维护一个链表的起始指针就可以依次得到整个队列了。接下来就是有左加左到链表里面，同样有右加右到链表里面，直到链表没有元素了就说明到达最底层了。算法的复杂度仍然是对每个结点访问一次，所以是O(n)，而空间上因为不需要额外空间来存储队列了，所以是O(1)。
     相对于102题，这道题操作上会更加繁琐一些，因为是通过维护层链表来完成遍历，不过本质上还是一次广度优先搜索。
     这道题是117题的预备，只是因为是完美二叉树，所以不用检查下一层的结点的右边是否有结点
     */
    public void connect(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        TreeLinkNode cur = root;
        TreeLinkNode child = null;
        TreeLinkNode childHead = null;

        while(cur != null) {
            TreeLinkNode latestCur = cur;//从root开始层序遍历
            while(latestCur != null) {
                //有左加左
                if (latestCur.left != null) {
                    if (childHead == null) {//从新的一层开始遍历
                        childHead = latestCur.left;
                        child = childHead;//起始指针
                    } else {
                        child.next = latestCur.left;
                        child = child.next;
                    }
                }
                //有右加右，同样的情况
                if (latestCur.right != null) {
                    if (childHead == null) {
                        childHead = latestCur.right;
                        child = childHead;
                    } else {
                        child.next = latestCur.right;
                        child = child.next;
                    }
                }

                latestCur = latestCur.next;//移向本层下一个结点
            }
            //移向下一层
            cur = childHead;
            childHead = null;
        }
    }
}

/**
* 因为是完美二叉树，所以也可以少一个变量，直接用cur.left.next和cur.right.next来表示下一层的结点
*/
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        TreeLinkNode cur = root;
        TreeLinkNode childHead = null;

        while (cur.left != null) {//从上到下
            childHead = cur.left;//记录下一层的起点
            while (cur != null) {//从左到右
                cur.left.next = cur.right;//因为是完全二叉树
                cur.right.next = (cur.next == null ? null : cur.next.left);
                cur = cur.next;
            }
            cur = childHead;//移向下一层
        }
    }
}

/**
* 递归的做法
*/
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        recursion(root);
    }
    private void recursion(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        if (root.left != null) {//有左儿子，完美二叉树肯定有有右儿子
            root.left.next = root.right;
            if (root.next != null) {//下一个结点还有，就把root.right连接到下一个结点root.next的left child上
                root.right.next = root.next.left;
            } else {//否则就是本层最后一个结点，直接指向null
                root.right.next = null;
            }
        }
        recursion(root.left);
        recursion(root.right);
    }
}
