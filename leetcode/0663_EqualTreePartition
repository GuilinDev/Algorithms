/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    The idea is to use a hash table to record all the different sums of each subtree in the tree. If the total sum of the tree is sum, we just need to check if the hash table constains sum/2.
    https://leetcode.com/problems/equal-tree-partition/discuss/106727/JavaC++-Simple-solution-with-only-one-HashMaplessgreater.
    */
    public boolean checkEqualTree(TreeNode root) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        int sum = getSum(root, map);
        if (sum == 0) {
            return map.getOrDefault(sum, 0) > 1;
        }
        return sum % 2 == 0 && map.containsKey(sum / 2);
    }
    
    private int getSum (TreeNode root, Map<Integer, Integer> map) {
        if (root == null) {
            return 0;
        }
        int cur = root.val + getSum(root.left, map) + getSum(root.right, map);
        map.put(cur, map.getOrDefault(cur, 0) + 1);
        
        return cur;
    }
}
