class Solution {
    /*
    https://leetcode.com/problems/repeated-substring-pattern/discuss/94352/Java-Simple-Solution-with-Explanation
    搜索所有可以整除的子串长度
    1.The length of the repeating substring must be a divisor of the length of the input string
    2.Search for all possible divisor of str.length, starting for length/2
    3.If i is a divisor of length, repeat the substring from 0 to i the number of times i is contained in s.length
    4.If the repeated substring is equals to the input str return true
    */
    public boolean repeatedSubstringPattern(String s) {
        int l = s.length();
        for (int i = l/2; i >= 1; i--) {
            if (l % i == 0) {//可以整除的子串的位置
                int m = l / i;//倍数
                String subS = s.substring(0, i);
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < m; j++) {
                    sb.append(subS);
                }
                if (sb.toString().equals(s)) {//子串倍数是原始的字符串
                    return true;
                }
            }
        }
        return false;
    }
}
