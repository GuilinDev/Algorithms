class Solution {
    /*
    可以跟随例子中的路线来遍历矩阵，路线无非就是从左下到右上，到顶后又从右上到坐下，一直到最右下角一个点。

    在往右上的过程中，一般是行在减，列在加，有三种情况停止右上：
    1.到了第一行，不能再往上了；
    2.到了最右边列，不能再往右了；
    3.到了最右下角的元素，这时候要全部结束遍历。

    往左下的过程中，一般是行在加，列在减，有三种情况停止左下：

    1.到了第一列，不能在往左了；
    2.到了最下边的行，不能再往下了；
    3.到了最右下角的元素，这时候要全部结束遍历。
    把这个过程用代码实现出来就可以了，用多个 if - else 来分支处理。
    */
    public int[] findDiagonalOrder(int[][] matrix) {
        boolean up = true;
        if (matrix.length == 0) {
            return new int[0];
        }
        int[] res = new int[matrix.length * matrix[0].length];//包含所有元素的array
        int i = 0;
        int j = 0;
        
        for (int k = 0; k < matrix.length * matrix[0].length; k++) {
            res[k] = matrix[i][j];
            if (up) {//up为true;向右上走
                if ((i-1) >= 0 && (j+1) < matrix[0].length) {
                    i--;
                    j++;
                } else if ((j+1) < matrix[0].length) {
                    j++;
                    up = false;
                } else if ((i+1) < matrix.length) {
                    i++;
                    up = false;
                } else {
                    break;
                }
            } else {//up为false，往左下走
                if ((i+1) < matrix.length && (j-1) >= 0) {
                    i++;
                    j--;
                } else if ((i+1) < matrix.length) {
                    i++;
                    up = true;
                } else if ((j+1) < matrix[0].length) {
                    j++;
                    up = true;
                } else {
                    break;
                }
            }
        }
        return res;
    }
}
