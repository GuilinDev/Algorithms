class Solution {
    /*
    O(n)的解法：https://leetcode.com/problems/student-attendance-record-ii/discuss/101643/Share-my-O(n)-C++-DP-solution-with-thinking-process-and-explanation
    O(log(n))优化：https://leetcode.com/problems/student-attendance-record-ii/discuss/101633/Improving-the-runtime-from-O(n)-to-O(log-n)
    */
    
    final int MOD = 1000000007;
    final int M = 6;

    public int checkRecord(int n) {
        int[][] A = {
            {0, 0, 1, 0, 0, 0},
            {1, 0, 1, 0, 0, 0},
            {0, 1, 1, 0, 0, 0},
            {0, 0, 1, 0, 0, 1},
            {0, 0, 1, 1, 0, 1},
            {0, 0, 1, 0, 1, 1},
        };
        return pow(A, n + 1)[5][2];
    }
    
    private int[][] pow(int[][] A, int n) {
        int[][] res = new int[M][M];
        for (int i = 0; i < M; i++) {
            res[i][i] = 1;
        }
        while (n > 0) {
            if (n % 2 == 1) {
                res = mul(res, A);
            }
            A = mul(A, A);
            n /= 2;
        }
        return res;
    }
    
    private int[][] mul(int[][] A, int[][] B) {
        int[][] C = new int[M][M];
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < M; j++) {
                for (int k = 0; k < M; k++) {
                    C[i][j] = (int)((C[i][j] + (long)A[i][k] * B[k][j])%MOD);
                }
            }
        }
        return C;
    }
}
