/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    这道题目在分布式系统中非常常见，来自不同client的sorted list要在central server上面merge起来。这个题目一般有两种做法:
    1) 第一种做法比较容易想到，就是有点类似于MergeSort的思路,就是分治法，这是一个比较经典的O(nlogn)的排序算法，比较重要。思路是先分成两个子任务，然后递归求子任务，最后回溯回来。这个题目也是这样，先把k个list分成两半，然后继续划分，知道剩下两个list就合并起来，合并时会用到Merge Two Sorted Lists这道题，需要掌握。
    复杂度分析： 时间复杂度-假设总共有k个list，每个list的最大长度是n，那么运行时间满足递推式T(k) = 2T(k/2)+O(n*k)。根据主定理，可以算出算法的总复杂度是O(nklogk)。空间复杂度的话是递归栈的大小O(logk)。
    
    2）第二种方法。这种方法用到了堆的数据结构，思路比较难想到，但是其实原理比较简单。维护一个大小为k的堆，每次取堆顶的最小元素放到结果中，然后读取该元素的下一个元素放入堆中，重新维护好。因为每个链表是有序的，每次又是去当前k个元素中最小的，所以当所有链表都读完时结束，这个时候所有元素按从小到大放在结果链表中。这个算法每个元素要读取一次，即是k*n次，然后每次读取元素要把新元素插入堆中要logk的复杂度，所以总时间复杂度是O(nklogk)。空间复杂度是堆的大小，即为O(k)。
    
    两种方法有着同样的时间复杂度，都是可以接受的解法，但是却代表了两种不同的思路，数据结构也不用。两种方法都应该掌握，因为在实际中比较有应用，所以也是比较常考的题目。
    */
    public ListNode mergeKLists(ListNode[] lists) {
        //第一遍写递归的方法
        if (lists == null || lists.length == 0) {
            return null;
        }
        return partion(lists, 0, lists.length-1);
    }
    private ListNode partion(ListNode[] lists, int l, int r) {
        if (l == r) {
            return lists[l];
        }

        if (l < r) {
            int m = l + (r - l)/2;
            ListNode l1 = partion(lists, l, m);
            ListNode l2 = partion(lists, m+1, r);
            return merge(l1, l2);
        } else {
            return null;
        }

    }
    private ListNode merge(ListNode l1, ListNode l2) {//这是合并两个节点，节点，节点
        ListNode dummy = new ListNode(0);
        dummy.next = l1;
        ListNode cur = dummy;//临时变量用来存假的头部，reference和value的区别

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                l1 = l1.next;//l1已经放在dummy的后面了
            } else {//把l2放到dummy后面，再把l1放到l2后面
                ListNode temp = l2.next;
                cur.next = l2;
                l2.next = l1;
                l2 = temp;
            }
            cur = cur.next;
        }
        if (l2 != null) {
            cur.next = l2;
        }
        return dummy.next;
    }
    //第二遍写堆的方法
}
