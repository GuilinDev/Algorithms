class Solution {
    /*
    这道题给了一个由D和I两个字符组成的字符串，分别表示对应位置的升序和降序，根据这个字符串生成对应的数字字符串。由于受名字中的permutation的影响，如果找出所有的全排列然后逐个数字验证，无法通过OJ
    https://leetcode.com/problems/find-permutation/discuss/96613/Java-O(n)-clean-solution-easy-to-understand
    */
    public int[] findPermutation(String s) {
        int n = s.length(), arr[] = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            arr[i] = i + 1; // sorted
        }
        for (int h = 0; h < n; h++) {
            if (s.charAt(h) == 'D') {
                int l = h;
                while (h < n && s.charAt(h) == 'D') {
                    h++;
                }
                reverse(arr, l, h);
            }
        }
        return arr;
    }
    
    private void reverse(int[] arr, int l, int h) {
        while (l < h) {
            arr[l] ^= arr[h];
            arr[h] ^= arr[l];
            arr[l] ^= arr[h];
            l++;
            h--;
        }
    }
}
