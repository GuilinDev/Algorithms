class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        /*
        这个题是一个NP问题，方法类似N-Queens中介绍的套路。思路是先排好序，然后每次递归中把剩下的元素一一加到结果集合中，并且把目标减去加入的元素，然后把剩下元素（包括当前加入的元素）放到下一层递归中解决子问题。
        算法复杂度因为是NP问题，所以自然是指数量级的。
        类似的题目Combination Sum II
        */
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        Arrays.sort(candidates);
        helper(candidates, 0, target, new ArrayList<Integer>(), res);
        return res;
    }
    
    public void helper(int[] candidates, int start, int target, ArrayList<Integer> item, List<List<Integer>> res) {
        if (target < 0) { //此combination不符合要求
            return;
        }
        
        if (target == 0) { //此combination刚好合适
            res.add(new ArrayList<Integer>(item));
            return;
        }
        
        for (int i = start; i < candidates.length; i++) {
            if (i > 0 && candidates[i] == candidates[i-1]) { //这个判断条件是为了去除重复元素产生重复结果的影响，因为在这里每个数可以重复使用，所以重复的元素也就没有作用了，应该跳过此层递归
                continue;
            }
            item.add(candidates[i]);
            helper(candidates, i, target-candidates[i],item,res);//每次target减去当前数，剩下的值逐步减少递归求到，知道target==0
            item.remove(item.size() - 1);
        }
        
    }
}
