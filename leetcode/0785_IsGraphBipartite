class Solution {
    /*
    Bipartite: 把所有的点放入两个 set，要保证，一条边的两个点m、n，如果 m 点在集合 A 中，那么 n 点应该在集合 B 中。
    https://leetcode.com/problems/is-graph-bipartite/discuss/115487/Java-Clean-DFS-solution-with-Explanation
    按照相邻两个nodes的颜色来分：
    -1: Haven't been colored.
    0: Blue.
    1: Red.
    */
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        
        for (int i = 0; i < n; i++) {//图有可能是一个disconnected graph，so check each unvisited node
            if (colors[i] == -1 && !validColor(graph, colors, 0, i)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean validColor(int[][] graph, int[] colors, int color, int node) {
        if (colors[node] != -1) {
            return colors[node] == color;
        }
        colors[node] = color;
        for (int next : graph[node]) {
            if (!validColor(graph, colors, 1 - color, next)) {
                return false;
            }
        }
        return true;
    }
}
