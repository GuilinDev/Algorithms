/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    /*
    https://www.cnblogs.com/liujinhong/p/6399135.html
    这个题目的意思是：给定一系列的区间，对于任意一个区间，在所有区间中找到一个区间的起始点大于等于当前区间的结束点，并且要求这两个点最接近。
    首先对所有区间的起始点进行排序，然后对于每一个区间使用二分查找来找到与这个区间结束点最接近的起始点的区间，并且获得该区间的索引。
    */
    public int[] findRightInterval(Interval[] intervals) {
        int[] result = new int[intervals.length];
        
        TreeMap<Integer, Integer> treeMap = new TreeMap<>();
        for (int i = 0; i < intervals.length; i++) {
            treeMap.put(intervals[i].start, i);
        }
        
        for (int i = 0; i < intervals.length; i++) {
            Map.Entry<Integer, Integer> item = treeMap.ceilingEntry(intervals[i].end);
            result[i] = (item == null) ? -1 : item.getValue();
        }
        return result;
    }
}
