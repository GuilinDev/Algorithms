class Solution {
    /*
   
使用两个指针的方法，即将两个指针的位置之间的字符看作是一个窗口，因此本质是窗口的移动过程。只不过那道题使用的是HashSet,而这道题使用的是HashMap或者HashTable都可以，因为words字符串数组中的字符有可能重复。因此需要使用HashMap  hm保存单词以及单词出现的次数。

1. 将字符串数组中的字符串存放在HashMap中，key为单词，value为单词出现的次数

2. 由于单词的长度都是相同的，所以外循环的次数为单词的长度，内循环的次数为字符串s中以单词长度划分之后的次数，循环条件中，j指向s中要判断的单词的第一个字符，j每次增加一个单词的长度，j最多只能到s中最后一个单词的第一个字符的位置。

3. 在内循环时， 借助了一个HashMap  curr来保存窗口中的单词及其出现的次数，如果当前的单词在hm中，则每当给该HashMap  curr中添加一个单词时，会判断其出现的次数是否超过了hm中该单词的出现次数，如果没超过，则表示匹配单词个数要增加count++, 否则需要缩小窗口，同样，由于左窗口left的那个单词并不一定与当前单词相等，因此也需要从left开始一个循环找到那个次数超了的单词，同时还需要将循环中的单词的次数在curr这个HashMap中减少。直到hm中该单词的次数与curr中该单词的次数相等。之后需要判断curr中所有的单词个数和count是否与hm中所有的单词的个数和是否相等。如果相等，表示从left到j的子串是words中字符串的一个连接，此时需要加入结果集，同时curr和left需要改变。如果在内循环中，突然有个单词不在hm中，则表示从left到j的串都不符合条件，则left = j + 单词长度，同时清空curr和count
    */
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> list = new ArrayList<Integer>();
        if (s == null || words == null || s.length() < 1 || words.length < 1) {
            return list;
        }
        HashMap<String, Integer> hm = new HashMap<String, Integer>();
        for (int i = 0, len = words.length; i < len; i++) {//将数组中的单词放入到hashmap中，因为数组中可能有多个相同单词，所以还需要计数
            if (hm.containsKey(words[i])) {
                hm.put(words[i], hm.get(words[i]) + 1);
            } else {
                hm.put(words[i], 1);
            }
        }
        int wordLen = words[0].length();//单词的长度
        int strLen = words.length;//单词组成的串的长度
        int i = 0;//窗口右边界
        int len = s.length();
        while (i < wordLen) {
            int left = i;//窗口左边界
            int count = 0;//匹配了hm中的单词数目
            HashMap<String, Integer> curr = new HashMap<String, Integer>();//记录窗口中已经匹配的单词以及其出现的次数
            for (int j = i; j <= len - wordLen; j = j + wordLen) {
                String str = s.substring(j, j + wordLen);//取出一个单词
                if (hm.containsKey(str)) {//如果字典中包含该单词
                    if (curr.containsKey(str)) {
                        curr.put(str, curr.get(str) + 1);
                    } else {
                        curr.put(str, 1);
                    }
                    
                    if (hm.get(str) >= curr.get(str)) {
                        count++;
                    } else {
                        while (hm.get(str) < curr.get(str)) {//如果当前窗口的单词出现次数大于给定的数组中的单词次数，窗口需要缩小
                            String temp = s.substring(left, left + wordLen);
                            if (curr.containsKey(temp)) {
                                curr.put(temp, curr.get(temp) - 1);
                                if (curr.get(temp) < hm.get(temp)) {
                                    count--;
                                }
                            }
                            left += wordLen;
                        }
                    }
                    if (count == strLen) {
                        list.add(left);
                        String ss = s.substring(left, left + wordLen);
                        if (curr.containsKey(ss)) {
                            curr.put(ss, curr.get(ss) - 1);
                            count--;
                        }
                        left += wordLen;
                    }
                } else { //如果字典中不包含该单词，直接看往下一个单词
                    left = j + wordLen;
                    count = 0;
                    curr.clear();
                }
            }
            i++;
        }
        return list;
    }
}
