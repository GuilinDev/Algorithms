class Solution {
    /*
    https://www.cnblogs.com/reboot329/p/5875877.html
    这个题的思路是动态规划，DP[n]代表能组成n的组合数。算1-n就可以，因为都是正数。

算dp[n]的时候遍历num[1] to num[n] index = i

如果i < dp[n] 那么dp[n] = dp[n] + dp[n-i]

从逻辑上来考虑比较复杂，比如4=0+4 1+3 2+2 3+1 4+0

0+4 1 （1+1+1+1）
1+3 1的组合3的组合
2+2 2的组合2的组合
3+1 3的组合*1的组合
4+0 1 （4）

1+4+4+4+1 然后除以2 因为重复了一遍
但是结果似乎不对

看答案 算法是

dp[n] = dp[n] + dp[n-i]
比如4
从1遍历到4
1<4
dp[4] = dp[4] + dp[4-1]

递推式dp[n] = dp[n] + dp[n-i]
    */
    public int combinationSum4(int[] nums, int target) {
        int[] dp = new int[target+1];
        dp[0] = 1;
        
        for (int n = 1; n < target+1; n++) {
            for (int m = 0; m < nums.length; m++) {
                if (n >= nums[m]) {
                    dp[n] = dp[n] + dp[n-nums[m]];
                }
            }
        }
        return dp[target];
    }
}
