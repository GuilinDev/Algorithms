class Solution {
    /*
    加油站问题
    可以转换成求最大连续和做，但是有更简单的方法。基于一个数学定理：
    如果一个数组的总和非负，那么一定可以找到一个起始位置，从他开始绕数组一圈，累加和一直都是非负的
    
    那么如何求开始位置在哪？

注意到这样一个现象：

1. 假如从位置i开始，i+1，i+2...，一路开过来一路油箱都没有空。说明什么？说明从i到i+1，i+2，...肯定是正积累。
2. 现在突然发现开往位置j时油箱空了。这说明什么？说明从位置i开始没法走完全程(废话)。那么，我们要从位置i+1开始重新尝试吗？不需要！为什么？因为前面已经知道，位置i肯定是正积累，那么，如果从位置i+1开始走更加没法走完全程了，因为没有位置i的正积累了。同理，也不用从i+2，i+3，...开始尝试。所以我们可以放心地从位置j+1开始尝试。
    */
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int start = 0;//起始位置
        int remain = 0;//当前剩余gas
        int debt = 0;//前面没能走完的所欠的
        
        for (int i = 0; i < gas.length; i++) {
            remain += gas[i] - cost[i]; 
            if (remain < 0) {
                debt += remain;
                start = i + 1;//从没油的那个站的后一个站开始算（因为只需要找到合适的起始点并返回就可以了，前面略过的加油站不用管，不在里面）
                remain = 0;
            }
        }
        return remain + debt >= 0 ? start : -1;//解法只有一个
    }
}
