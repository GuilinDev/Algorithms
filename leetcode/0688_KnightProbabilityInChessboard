class Solution {
    /*
    这道题给了一个大小为NxN国际象棋棋盘，上面有个骑士，相当于中国象棋中的马，能走‘日’字，给了我们一个起始位置，然后说允许我们走K步，问走完K步之后还能留在棋盘上的概率是多少。
    https://leetcode.com/problems/knight-probability-in-chessboard/discuss/108181/My-accepted-DP-solution
    */
    int[][] moves = {{1,2}, {1,-2},{2,1},{2,-1},{-1,2},{-1,-2},{-2,1},{-2,-1}};
    public double knightProbability(int N, int K, int r, int c) {
        int len = N;
        double dp0[][] = new double[len][len];
        for (double[] row : dp0) {
            Arrays.fill(row, 1);
        }
        for (int l = 0; l < K; l++) {
            double[][] dp1 = new double[len][len];
            for (int i = 0; i < len; i++) {
                for (int j = 0; j < len; j++) {
                    for (int[] move : moves) {
                        int row = i + move[0];
                        int col = j + move[1];
                        if (isLegal(row, col, len)) {
                            dp1[i][j] += dp0[row][col];
                        }
                    }
                }
            }
            dp0 = dp1;
        }
        return dp0[r][c]/Math.pow(8, K);
    }
    
    private boolean isLegal(int r, int c, int len) {
        return r >= 0 && r < len && c >= 0 && c < len;
    }
}
