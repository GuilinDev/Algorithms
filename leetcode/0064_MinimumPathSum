class Solution {
    /*
    生信中序列比对时，打分矩阵用到的动态规划Needleman-Wunsch, Smith-Waterman算法?
    
    */
    
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        
        // 把grid中所有元素的位置替换成它之前由最小path生成的sum，in place所以没有用到额外空间
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j != 0) {//只能向右移动
                    grid[i][j] += grid[i][j-1];
                }
                if (i != 0 && j == 0) {//只能向下移动
                    grid[i][j] += grid[i-1][j];
                }
                if (i != 0 && j != 0) {//检查上面和左边的数字，累加一个相对更小的数字
                    grid[i][j] += Math.min(grid[i-1][j], grid[i][j-1]);
                }
            }
        }
        return grid[m-1][n-1]; //最后一个位置存储了最后的sum
    }
    
    //另一种写法
    /*
    public int minPathSum(int[][] grid) {
        int m = grid.length;// row
        int n = grid[0].length; // column
        for(int j = 1; j < n; j++) grid[0][j] = grid[0][j] + grid[0][j-1];
        for(int i = 1; i < m; i++) grid[i][0] = grid[i][0] + grid[i-1][0];
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                    grid[i][j] = Math.min(grid[i][j - 1], grid[i - 1][j]) + grid[i][j];
            }
        }
        return grid[m - 1][n - 1];
    }
    */
}
