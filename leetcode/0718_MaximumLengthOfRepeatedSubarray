class Solution {
    /*
    https://leetcode.com/problems/maximum-length-of-repeated-subarray/discuss/109039/Concise-Java-DP:-Same-idea-of-Longest-Common-Substring
    dp的办法
    */
    public int findLength(int[] A, int[] B) {
        if (A == null || B == null) {
            return 0;
        }
        
        int m = A.length;
        int n = B.length;
        int max = 0;
        
        //dp[i][j] is the length of longest common subarray ending with nums[i-1] and nums[j-1]
        int[][] dp = new int[m+1][n+1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                } else {
                    if (A[i-1] == B[j-1]) {
                        dp[i][j] = 1 + dp[i-1][j-1];
                        max = Math.max(max, dp[i][j]);
                    }
                }
            }
        }
        return max;
    }
}
