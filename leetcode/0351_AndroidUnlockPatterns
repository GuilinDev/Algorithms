class Solution {
    /*
    https://leetcode.com/problems/android-unlock-patterns/discuss/82463/Java-DFS-solution-with-clear-explanations-and-optimization-beats-97.61-(12ms)
    DFS
    */
    public int numberOfPatterns(int m, int n) {
        //skip字串表示两个pairs之间的number
        int skip[][] = new int[10][10];
        skip[1][3] = skip[3][1] = 2;
        skip[1][7] = skip[7][1] = 4;
        skip[3][9] = skip[9][3] = 6;
        skip[7][9] = skip[9][7] = 8;
        skip[1][9] = skip[9][1] = skip[2][8] = skip[8][2] = skip[3][7] = skip[7][3] = skip[4][6] = skip[6][4] = 5;
        boolean vis[] = new boolean[10];
        
        int result = 0;
        //从m到n做DFS的搜索
        for (int i = m; i <= n; i++) {
            result += DFS(vis, skip, 1, i - 1) * 4;// 1, 3, 7, 9是对称的
            result += DFS(vis, skip, 2, i - 1) * 4;// 2, 4, 6, 8是对称的
            result += DFS(vis, skip, 5, i - 1); // 5
        }
        return result;
    }
    
    private int DFS(boolean vis[], int[][] skip, int cur, int remain) {
        if (remain < 0) {
            return 0;
        }
        if (remain == 0) {
            return 1;
        }
        vis[cur] = true;
        int result = 0;
        for (int i = 1; i <= 9; i++) {
            //如果vis[i]未被访问 并且 （两个数字临近 或者 跳过的数字已被访问）
            if (!vis[i] && (skip[cur][i] == 0 || (vis[skip[cur][i]]))) {
                result += DFS(vis, skip, i, remain - 1);
            }
        }
        vis[cur] = false;
        return result;
    }
}
