/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //二叉树的前序遍历，根-左-右,与94中序和145后序的对比
    // 二叉树遍历的几种方式，前序中序后序和分层遍历
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        
        TreeNode current = root;
        
        //这个方法只有右儿子存到了栈中
        while (current != null) {
            list.add(current.val);//首先把根加到list中
            if (current.right != null) {
                stack.push(current.right);//把当前node的右儿子加入到栈
            }
            current = current.left;//把当前位置移到左儿子，下一轮加入
            if (current == null && !stack.isEmpty()) {//如果向左到头了，那就回到最后存入的右儿子作为root再开始，DFS
                current = stack.pop();
            }
        }
        return list;
    }
}
