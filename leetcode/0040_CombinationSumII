class Solution {
    /*
    这道题跟Combination Sum非常相似，唯一的区别就是这个题目中单个元素用过就不可以重复使用了。乍一看好像区别比较大，但是其实实现上只需要一点点改动就可以完成了，就是递归的时候传进去的index应该是当前元素的下一个。
    */
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        
        Arrays.sort(candidates);
        
        helper(candidates, 0, target, new ArrayList<Integer>(), res);
        return res;
    }
    
    public void helper(int[] candidates, int start, int target, ArrayList<Integer> item, List<List<Integer>> res) {
        
        if (target == 0) {
            res.add(new ArrayList<Integer>(item));
            return;
        }
        
        if (target < 0 || start >= candidates.length) { //注意顺序前面条件的顺序
            return;
        }
        
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i-1]) {
                continue;
            }
            item.add(candidates[i]);
            helper(candidates, i+1, target-candidates[i], item, res);
            item.remove(item.size() - 1);
        }
    }
}
