class Solution {
    public String simplifyPath(String path) {
        Deque<String> stack = new LinkedList<>();//双端队列，同时具有队列和栈的特点，是Queue的一个子接口，双向队列是指该队列两端的元素既能入队(offer)也能出队(poll),如果将Deque限制为只能从一端入队和出队，则可实现栈的数据结构。对于栈而言，有入栈(push)和出栈(pop)，遵循先进后出原则;
        //void push(E e):将给定元素”压入”栈中。存入的元素会在栈首。即:栈的第一个元素 
        //E pop():将栈首元素删除并返回。
        
        Set<String> skip = new HashSet<>(Arrays.asList("..",".",""));
        
        for (String dir : path.split("/")) {//分出来有可能是"..",".",""和正常的字符，这个for循环做预处理
            if (dir.equals("..") && !stack.isEmpty()) {
                stack.pop();
            } else if (!skip.contains(dir)) {
                stack.push(dir);
            }
        }
        String res = "";
        for (String dir : stack) {
            res = "/" + dir + res;//加上"/"
        }
        return res.isEmpty() ? "/" :res;
    }
}
