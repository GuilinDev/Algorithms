/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    106题是利用中序和后序重建二叉树，利用前序和后序则是不能重建
    https://www.cnblogs.com/springfor/p/3884034.html
    1. 先序遍历的从左数第一个为整棵树的根节点。
    2. 中序遍历中根节点是左子树右子树的分割点。
    
    这道题可以用递归的方法解决。
具体解决方法是：
通过先序遍历找到第一个点作为根节点，在中序遍历中找到根节点并记录index。
因为中序遍历中根节点左边为左子树，所以可以记录左子树的长度并在先序遍历中依据这个长度找到左子树的区间，用同样方法可以找到右子树的区间。
递归的建立好左子树和右子树就好。
    */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLength = preorder.length;
        int inLength = inorder.length;
        return buildTree(preorder, 0, preLength-1, inorder, 0, inLength-1);
    }
    
    public TreeNode buildTree(int[] pre, int preStart, int preEnd, int[] in, int inStart, int inEnd){
        if(inStart > inEnd || preStart > preEnd){
            return null;
        }
  
        int rootVal = pre[preStart];//先序遍历找到第一个点作为根节点，根-左-右
        int rootIndex = 0;
        for(int i = inStart; i <= inEnd; i++){
          if(in[i] == rootVal){
              rootIndex = i;
             break;
          }
        }

        int len = rootIndex - inStart;
        TreeNode root = new TreeNode(rootVal);
        root.left = buildTree(pre, preStart+1, preStart+len, in, inStart, rootIndex-1);
        root.right = buildTree(pre, preStart+len+1, preEnd, in, rootIndex+1, inEnd);

        return root;
    }
}
