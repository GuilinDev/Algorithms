class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>();
        HashSet<ArrayList<Integer>> noDuplicateQuad = new HashSet<ArrayList<Integer>>();
        
        Arrays.sort(nums);
        
        for (int first = 0; first <= nums.length - 4; first++) {
            for (int second = first + 1; second <= nums.length - 3; second++) {
                int third = second + 1;
                int fourth = nums.length - 1;
                
                while (third < fourth) {
                    int sum = nums[first] + nums[second] + nums[third] + nums[fourth];
                    if (sum < target) {
                        third++;
                    } else if (sum > target) {
                        fourth--;
                    } else { //找到了一个合适的Quadruplet
                        ArrayList<Integer> oneQuadruplet = new ArrayList<>();
                        oneQuadruplet.add(nums[first]);
                        oneQuadruplet.add(nums[second]);
                        oneQuadruplet.add(nums[third]);
                        oneQuadruplet.add(nums[fourth]);
                        
                        if (!noDuplicateQuad.contains(oneQuadruplet)) {
                            noDuplicateQuad.add(oneQuadruplet);
                            result.add(oneQuadruplet);
                        }
                        
                        //这里是两个indices同时移动，因为排过序了后找到的是已经等于target了，所以只移动一个index的话是不会再找到非重复的Quadruplet的
                        third++;
                        fourth--;
                    }
                }
            }
        }
        return result;
    }
}
