class MyQueue {
    /*
    （1）题意为用栈来实现队列。

（2）要用栈来实现队列，首先需要了解栈和队列的性质。栈：先进后出，只能在栈顶增加和删除元素；队列：先进先出，只能在队尾增加元素，从队头删除元素。这样，用栈实现队列，就需要对两个栈进行操作，这里需要指定其中一个栈为存储元素的栈，假定为stack2，另一个为stack1。当有元素加入时，首先判断stack2是否为空（可以认为stack2是目标队列存放元素的实体），如果不为空，则需要将stack2中的元素全部放入(辅助栈)stack1中，这样stack1中存储的第一个元素为队尾元素；然后，将待加入队列的元素加入到stack1中，这样相当于实现了将入队的元素放入队尾；最后，将stack1中的元素全部放入stack2中，这样stack2的栈顶元素就变为队列第一个元素，对队列的pop和peek的操作就可以直接通过对stack2进行操作即可。
    */

    public Stack<Integer> stack1 = new Stack<>();
    public Stack<Integer> stack2 = new Stack<>();
    /** Initialize your data structure here. */
    public MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        while (!stack2.isEmpty()) {
            stack1.push(stack2.pop());
        }
        stack1.push(x);
        while (!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        return stack2.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        return stack2.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stack2.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
