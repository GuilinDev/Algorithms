class Solution {
    /*
    https://leetcode.com/problems/one-edit-distance/discuss/50098/My-CLEAR-JAVA-solution-with-explanation
    Replace - Delete for s or t
    */
    public boolean isOneEditDistance(String s, String t) {
        for (int i = 0; i < Math.min(s.length(), t.length()); i++) {
            if (s.charAt(i) != t.charAt(i)) {
                if (s.length() == t.length()) {//length一样，所以只会replace
                    return s.substring(i+1).equals(t.substring(i+1));
                } else if (s.length() < t.length()) {//t比s长，所以应该从t中删除
                    return s.substring(i).equals(t.substring(i+1));
                } else {//s比t长,所以应该从s中删除
                    return t.substring(i).equals(s.substring(i+1));
                }
            }
        }
        //前面所有的字符都相同，唯一的可能就是删除掉s和t二者中较长的那个字符串的最后一个字符
        return Math.abs(s.length() - t.length()) == 1;
    }
}
