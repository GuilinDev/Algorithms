class Solution {
    
    public int uniquePaths(int m, int n) {
       //DP解法
        int[][]grid = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    grid[i][j] = 1;
                } else {
                    grid[i][j] = grid[i-1][j] + grid[i][j-1];
                }
            }
        }
        return grid[m-1][n-1];
    }
    
     /*
    另一种高效的解法：如果把向右移动当作0，向下移动当作1，此问题就等同于“有m+n+2个bits，其中m-1个位置可以用1填充，n-1个位置可以用0填充，总共有多少种组合?” C(m-1)(m+n-2)种，m-1是上标，m+n-2是下标。
    */
    // long result = 1;
    // for (int i = 0; i < Math.min(m-1, n-1); i++) {
    //     result = result*(m+n-2-i)/(i+1); //组合数的算法公式
    // }
    // return (int)result;
    
}
