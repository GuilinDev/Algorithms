class Solution {
    /*
    https://leetcode.com/problems/the-maze/discuss/97071/Easy-understanding-Java-bfs-solution.
    BFS
    */
    class Point {
        int x, y;
        public Point(int _x, int _y) {
            x = _x;
            y = _y;
        }
    }
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        int m = maze.length, n = maze[0].length;
        if (start[0] == destination[0] && start[1] == destination[1]) {
            return true;
        }
        int[][] dir = new int[][]{{-1,0},{0,1},{1,0},{0,-1}};
        boolean[][] visited = new boolean[m][n];
        LinkedList<Point> list = new LinkedList<>();
        visited[start[0]][start[1]] = true;
        list.offer(new Point(start[0], start[1]));
        
        while (!list.isEmpty()) {
            Point p = list.poll();
            int x = p.x, y = p.y;
            for (int i = 0; i < 4; i++) {
                int xx = x, yy = y;
                while (xx >= 0 && xx < m && yy >= 0 && yy < n && maze[xx][yy] == 0) {
                    xx += dir[i][0];
                    yy += dir[i][1];
                }
                xx -= dir[i][0];
                yy -= dir[i][1];
                if (visited[xx][yy]) {
                    continue;
                }
                visited[xx][yy] = true;
                if (xx == destination[0] && yy == destination[1]) {
                    return true;
                }
                list.offer(new Point(xx, yy));
            }
        }
        return false;
    }
}
