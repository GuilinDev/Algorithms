class MinStack {
    /*
        最小栈，跟原来的栈相比就是多了一个功能，可以返回该栈的最小值。只用到了一个栈，另外需要一个整型变量min_val来记录当前最小值，初始化为整型最小值，然后如果需要进栈的数字小于等于当前最小值min_val，那么将min_val压入栈，并且将min_val更新为当前数字。在出栈操作时，先将栈顶元素移出栈，再判断该元素是否和min_val相等，相等的话我们将min_val更新为新栈顶元素，再将新栈顶元素移出栈
    */
    private int min_val = Integer.MAX_VALUE;
    private Stack<Integer> s = new Stack<Integer>();
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        if (x <= min_val) {
            s.push(min_val);
            min_val = x;//将min_val更新为当前数字
        }
        s.push(x); //这里压入元素
    }
    
    public void pop() { //先将栈顶元素移出栈s.pop()，再判断该元素是否和min_val相等，相等的话我们将min_val更新为新栈顶元素，再将新栈顶元素移出栈
        if (s.pop() == min_val) {//注意这个判断条件已经做了将栈顶元素移除栈的操作了
            min_val = s.pop();
        }
    }
    
    public int top() {
        return s.peek();//直接用原本stack的peek()方法
    }
    
    public int getMin() {
        return min_val;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
