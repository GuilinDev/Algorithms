class Solution {
    /*
    队列里面的人用[h,k]二元组表示，h代表当前人的高度，k代表在这个人前面且高度大于等于它的h的人数，现在要求按照这个二元组重构这个队列使之变得有效。这道题的思路是(贪心算法)：
　　(1)首先找到身高最高的人并对他们进行排序。
　　(2)然后找到身高次高的人，按照他们的前面的人数把他们插入到最高的人群中。
    (3) 以此类推
  
因此这是一个排序和插入的过程，按照身高进行降序排序，如果我们按照先处理身最高的，那他们的k值就是他们所应该在的位置——因为已经没有比他们更高的了。 
　　所以我们从高度从高到低按照k值的位置一直插入到答案中即可。
    */
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, new Comparator<int[]>() {//按身高降序排序(h大的在前面)，按k的大小升序排列(k小的在前面)
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) {
                    return -a[0] + b[0];//先排身高
                } else {
                    return a[1] - b[1];//身高一样再排前面的人数
                }
            }
        });
        
        List<int[]> result = new LinkedList<int[]>();//存储结果
        for (int i = 0; i < people.length; i++) {
            int[] peop = people[i];
            result.add(peop[1], peop);
        }
        return result.toArray(new int[people.length][]);
    }
}
