/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
/*
参考：https://www.cnblogs.com/reboot329/p/6120474.html
先都塞到STACK里面，如果Peek的元素是单一int就返还TRUE，然后next()会直接返还那个int。
如果不是单一int，是另一个List，那么把这个List给POP出来，再倒着塞回到stack。
再PEEK第一个，直到是单一INT。

当然，如果没元素了直接返还FALSE就行了
*/

public class NestedIterator implements Iterator<Integer> {

    public Stack<NestedInteger> stack = new Stack<>();
    public NestedIterator(List<NestedInteger> nestedList) {
        for (int n = nestedList.size() - 1; n>= 0; n--) {
            stack.push(nestedList.get(n));
        }
    }

    @Override
    public Integer next() {
        if (hasNext()) {
            return stack.pop().getInteger();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasNext() {
        while (!stack.isEmpty()) {
            if (stack.peek().isInteger()) {
                return true;
            } else {
                NestedInteger tempNested = stack.pop();
                for (int n = tempNested.getList().size() - 1; n >= 0; n--) {
                    stack.push(tempNested.getList().get(n));
                }
            }
        }
        return false;
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
