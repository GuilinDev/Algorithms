class Solution {
    /*
    https://leetcode.com/problems/max-chunks-to-make-sorted/discuss/113520/Java-solution-left-max-and-right-min.
    遍历整个array，每一次左边的元素小于等于右边的元素，都会产生一个新的chunck，
    time O(n)， space O(n)
    这个解法同样适用于 768 II
    */
    public int maxChunksToSorted(int[] arr) {
        int n = arr.length;
        int[] maxOfLeft = new int[n];
        int[] minOfRight = new int[n];
        
        maxOfLeft[0] = arr[0];
        for (int i = 1; i < n; i++) {
            maxOfLeft[i] = Math.max(maxOfLeft[i-1], arr[i]);
        }
        
        minOfRight[n-1] = arr[n-1];
        for (int i = n-2; i >= 0; i--) {
            minOfRight[i] = Math.min(minOfRight[i+1], arr[i]);
        }
        
        int res = 0;
        for (int i = 0; i < n-1; i++) {
            if (maxOfLeft[i] <= minOfRight[i+1]) {
                res++;
            }
        }
        return res + 1;
    }
}
