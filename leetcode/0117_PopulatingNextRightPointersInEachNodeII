/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
 /**
 * 利用额外空间Queue来做的话，跟正常二叉树的层序遍历的解法非常相似，比较简单，容易想到
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        Queue<TreeLinkNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                TreeLinkNode node = queue.poll();
                node.next = queue.peek();
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
                size--;
                if (size == 0) {//层序遍历中，本层的结点已经遍历完，最后一个指向null
                    node.next = null;
                }
            }
        }
    }
}

/**
* 题目要求使用常数空间，因此使用三个变量，一个指向当前遍历的结点，一个记录下一层的最左边结点，一个记录下一层连接到的上一个结点，再循环本层时，连结好下一层，
* 同116题的解法完全类似
*/
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null) {
            return;
        }

        TreeLinkNode cur = root;//层序遍历中的当前结点
        TreeLinkNode childHead = null;//下一层的头结点,一直是最左边的那个node
        TreeLinkNode child = null;//下一层的结点，从最左边到最右边

        while (cur != null) {//从上到下
            while (cur != null) {//从左到右

                if (cur.left != null) {
                    if (childHead != null) {
                        child.next = cur.left;
                        //child = cur.left;
                    } else {
                        childHead = cur.left;//child，把child设为当前结点的左儿子
                        //child = cur.left;
                    }
                    child = cur.left;
                }
                if (cur.right != null) {
                    if (childHead != null) {
                        child.next = cur.right;
                        //child = cur.right;
                    } else {
                        childHead = cur.right;//child（上面的），把child设为当前结点的左儿子
                        //child = cur.right;
                    }
                    child = cur.right;
                }
                //移动到本层的下一个结点
                cur = cur.next;
            }
            //移动到下一层
            cur = childHead;//当前结点移动到下一层的第一个结点
            childHead = null;
            child = null;
        }
    }
}

