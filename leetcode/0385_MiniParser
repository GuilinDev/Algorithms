/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    /*
    思路：1.首先根据是否有括号判定是否为纯数字，如果是纯数字则直接转化。2其次判断list是否为空，为空直接转化。3.统计左右括号是否对应，如果对应，则遇到逗号后递归处理，无论是list还是纯数字。
    */
    public NestedInteger deserialize(String s) {
        if (s.contains("[")) {
            NestedInteger ans = new NestedInteger();
            if (s.length() > 2) {
                int begin = 1;
                char[] cs = s.toCharArray();
                int count = 0;
                for (int i = 1; i < s.length() - 1; i++) {
                    if (cs[i] == ',' && count == 0) {
                        ans.add(deserialize(s.substring(begin, i)));
                        begin = i + 1;
                    }
                    if (cs[i] == '[' || cs[i] == ']') {
                        count += (92 - cs[i]);
                    }
                }
                ans.add(deserialize(s.substring(begin, s.length()-1)));
            }
            return ans;
        }
        return new NestedInteger(Integer.valueOf(s));
    }
}
