class Solution {
    /*
    http://blog.csdn.net/jmspan/article/details/51219203
    方法三：应用合并排序。如果我们对数组进行排序，那么对于某个特定的数据，其后面的逆序数等于在排序过程中需要移动到该数前面的个数。时间复杂度O(nlogn)。

我们定义数组pos[i] = j，表示第排名i个数据的元素下标是j。

    */
    public List<Integer> countSmaller(int[] nums) {
        int[] smaller = new int[nums.length];
        int[] pos = new int[nums.length];
        for (int i = 0; i < pos.length; i++) {
            pos[i] = i;
        }
        sort(nums, smaller, pos, 0, nums.length-1);
        
        List<Integer> result = new ArrayList<>(nums.length);
        
        for (int i = 0; i < nums.length; i++) {
            result.add(smaller[i]);
        }
        return result;
    }
    
    private void sort(int[] nums, int[] smaller, int[] pos, int from, int to) {
        if (from >= to) {
            return;
        }
        int m = from + (to - from)/2;
        sort(nums, smaller, pos, from, m);
        sort(nums, smaller, pos, m+1, to);
        
        int[] merged = new int[to-from+1];
        int i = from, j = m+1, k = 0, jump = 0;
        
        while (i <= m || j <= to) {
            if (i > m) {
                jump++;
                merged[k] = pos[j];
                k++;
                j++;
            } else if (j > to) {
                smaller[pos[i]] += jump;
                merged[k] = pos[i];
                k++;
                i++;
            } else if (nums[pos[i]] <= nums[pos[j]]) {
                smaller[pos[i]] += jump;
                merged[k] = pos[i];
                k++;
                i++;
            } else {
                jump++;
                merged[k] = pos[j];
                k++;
                j++;
            }
        }
        for (int p = 0; p < merged.length; p++) {
            pos[from+p] = merged[p];
        }
    }
}
