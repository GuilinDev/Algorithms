class Solution {
    /*
    HashSet:https://leetcode.com/problems/longest-palindrome/discuss/89604/Simple-HashSet-solution-Java
    int[26]:https://leetcode.com/problems/longest-palindrome/discuss/89606/JAVA-Solution.-Simple-and-Clear-Using-int26
    */
    public int longestPalindrome(String s) {
        int[] lowerCase = new int[26];
        int[] upperCase = new int[26];
        int result = 0;
        
        for (int i = 0; i < s.length(); i++) {
            char temp = s.charAt(i);
            if (temp >= 97) {
                lowerCase[temp-'a']++;
            } else {
                upperCase[temp-'A']++;
            }
        }
            
        for (int i = 0; i < 26; i++) {
            result += (lowerCase[i]/2) * 2;
            result += (upperCase[i]/2) * 2;
        }

        return result == s.length() ? result : result + 1;
    }
    
    /*
    //HashSet
    public int longestPalindrome(String s) {
        if(s==null || s.length()==0) return 0;
        HashSet<Character> hs = new HashSet<Character>();
        int count = 0;
        for(int i=0; i<s.length(); i++){
            if(hs.contains(s.charAt(i))){
                hs.remove(s.charAt(i));
                count++;
            }else{
                hs.add(s.charAt(i));
            }
        }
        if(!hs.isEmpty()) return count*2+1;
        return count*2;
}
    */
}
