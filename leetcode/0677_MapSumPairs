class MapSum {

    /*
    Time Complexity for sum is O(1)
    Time Complexity for insert is O(len(key) ^ 2)
    https://leetcode.com/problems/map-sum-pairs/discuss/107515/Simple-Java-HashMap-Solution-O(1)-sum-and-O(len(key))-insert
    */
    
    Map<String, Integer> map;
    Map<String, Integer> original;
    
    /** Initialize your data structure here. */
    public MapSum() {
        map = new HashMap<>();
        original = new HashMap<>();
    }
    
    public void insert(String key, int val) {
        val -= original.getOrDefault(key, 0);//calculate the diff to be added to prefixes
        String s = "";
        for (char c : key.toCharArray()) {
            s += c;//creating all prefixes
            map.put(s, map.getOrDefault(s, 0) + val); //update or insert all prefixes with new value
        }
        original.put(key, original.getOrDefault(key, 0) + val);
    }
    
    public int sum(String prefix) {
        return map.getOrDefault(prefix, 0);
    }
}

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */
