class Solution {
    /*
    https://www.cnblogs.com/yrbbest/p/5060225.html
    题目的意思是给定一个无向连接图，从中选取一个节点作为root,看做一颗树，返回最小高度的树节点。

当只有一个节点的时候，即n==1,那么就可以直接返回；

当只有两个节点的时候，即n==2，那么这两个节点都是符合条件的，任意一个作为root节点，高度都是一样的，所以需要返回这两个节点。

当n>2时候，必然就会存在叶子节点和中间节点的区别，所谓的叶子节点就是只有一个节点与之连接，中间节点就是至少存在两个节点与之相连接。如果选取叶子节点为root,这样的树高度为height = 1+height(中间节点)。很显然，得到的树高度会大于中间节点。所以按照题意，我们只需要选取中间节点，然后遍历，深度搜索，就能够获得最小高度树的root节点，线性复杂度。
    */
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        //先计算degree为1的节点，这些节点只和一个节点相连，所以这些是leaf节点。逐个去除掉leaf节点以后我们可以尝试计算上一层leaf，继续and继续，直到最后我们剩下一个节点或者两个节点，就是我们要求的root nodes。Time Complexity - O(n)， Space Complexity - O(n)
        List<Integer> leaves = new ArrayList<>();
        if (n == 1) {
            return Collections.singletonList(0);//返回一个只包含指定对象的不可变列表
        }
        List<Set<Integer>> graph = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            graph.add(new HashSet<>());
        }
        
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        
        for (int i = 0; i < n; i++) {
            if (graph.get(i).size() == 1) {
                leaves.add(i);
            }
        }
        
        while (n > 2) {
            n -= leaves.size();
            List<Integer> newLeaves = new ArrayList<>();
            for (int leaf : leaves) {
                for (int j : graph.get(leaf)) {
                    graph.get(j).remove(leaf);
                    if (graph.get(j).size() == 1) {
                        newLeaves.add(j);
                    }
                }
            }
            leaves = newLeaves;
        }
        return leaves;
    }
}
